[
  {
    "path": "posts/2021-05-31-rockstar-ds/",
    "title": "Rockstar data science",
    "description": "A discussion about 'the sexiest job of the 21st century'",
    "author": [
      {
        "name": "Lorenzo Braschi",
        "url": {}
      }
    ],
    "date": "2021-05-31",
    "categories": [],
    "contents": "\n\n\n\nFigure 1: Figure from Austin Neill on Unsplash\n\n\n\nEvery company on Earth wants to hire so called “rockstar data scientist”, but what are they? Where do you find them? A rockstar data scientist is supposedly a brilliant data scientist, skilled at all things data sciencey, and single handedly capable of driving company value to the skies.\nThey are also a myth.1\nWhat are the qualities that make a data scientist a “rockstar data scientist”? It’s never too clear, but it is something around the lines of “the best of the best”. But “best” is not really an absolute quality; it’s more a relative one. Best at doing what? And this is kind of the point, as in many occasions business don’t have quite a ready answer as to what would this rockstar data scientist be doing except, well, rock.\n\nBusinesses that lack a clear roadmap for data science should fix that before they go hunting for “rockstar” data scientists - or even pedestrian ones.\nSuch a rockstar should be, among other things:\nA master of databases and data engineering, capable of solving the mess of the company’s database and extract from it the key insights, while at the same time validating the company’s data strategy so far and reassure them that they haven’t wasted their time and resources hoarding every possible record in their database and somehow also discarding important data crucial to their business.\n\nYes, this has happened to me. No, it wasn’t fun.\nA super modeller, capable of writing in many different languages models for everything in a data science workbook: from classical parametric models to the latest craze in deep learning, automated solutions, etc.\nA competent software engineer as well, master of deployment, capable of mounting whatever ML solution into an evergrowing range of cloud and/or on prems options.\nOf course a brilliant communicator, with the oratory of the ancients, capable of making entire business meetings weep with beautiful graphs and brilliant explanations, no matter what’s the technical background of the audience.\nIt is extremely unlikely that this skillset will fit an indivudual human brain. And even if it somehow does, a single person will only be capable of doing a single thing at a time! Also if you are looking for a single person to do all sorts of stuff you’re not looking for a rockstar, you’re looking for a one-man orchestra.\n\n\n\n\nThat’s simultaneously an impressive display of skill and a bit of a goofy one.\nData science bands\nThere is another reason to get a team, and that is that rockstar data scientists don’t play alone, they play in bands.\nThink of everything a true rocktar gets: sure, they call the shots and boss everyone around, but they still need a band. Supporting musicians, stage designers, even caterers and roadies. These may be bossed around by the rockstar, and might be replaceable, but the valuable ones are not. And a rockstar has a total control of who plays with them; once hired for a concert, a rockstar hires the team to their liking (or hire someone to hire the team to the rockstar’s liking).\nDoes a prospective “rockstar data scientist” have the same kind of power? Is the company willing to give this “rockstar” full design power?\n\nWell, if not actually a myth, then extraordinarily rare and expensive.↩︎\n",
    "preview": {},
    "last_modified": "2021-08-18T11:24:26+02:00",
    "input_file": "rockstar-ds.knit.md"
  },
  {
    "path": "posts/2021-02-04-git-basics-tutorial/",
    "title": "Git basics tutorial",
    "description": "A brief git tutorial",
    "author": [
      {
        "name": "Lorenzo Braschi",
        "url": {}
      }
    ],
    "date": "2021-02-04",
    "categories": [],
    "contents": "\n\nContents\nWhat is git and why?\nBasic setup\nBasic commands\nWorking with branches\nWorkflow\nSummary\nRead more\n\nThis is my git tutorial. There are many others like it, but this one is mine. My git is my best friend. It brings my code to life. I must master it as I master my code.\nWithout git, my code is useless. Without my code, my git is useless… OK, enough with Full Metal Jacket references.\nWhat is git and why?\nGit is a version control system that relies on snapshots to track changes in a directory containing different types of files. It is most useful for changes in text-based documents (but not only), and therefore, is especially well suited to track changes in code.\nDoes this sound familiar?\n\n\n\nFigure 1: From http://phdcomics.com/comics/archive.php?comicid=1531\n\n\n\nThe main challenge for this kind of work is that the development of a file is not entirely linear, as the comic above illustrates. Also, a common mistake is to try to capture the changes in the file metadata - in this case, in the name of the file. And stick to a given convention. Good luck with that.\nIn this tutorial we will introduce git from the command line. There are many IDEs and point and click versions but to me they can be more confusing than anything. For example, RStudio has an incorporated git manager, but I still find more useful to use the command line.\nBasic setup\nFirst things first, you need to have git installed. You only need to do this once per computer, and maybe git is already pre-installed in your computer by your administrator. Run the following command:\n\ngit --version\n\nand if it does not return an error message, you have git installed. If you have not done so before, you need to set up your git configuration first. This is simply a matter of introducing yourself to git, like any polite person would:\n\nGlobal configuration\n\ngit config --global user.name \"<your name>\"\ngit config --global user.email \"<your email>\"\n\nIt may also be useful to set up SSH keys for ease of connection to the remote repository. Depending on your system, ssh keys can be generated directly in the terminal with the following command:\n\nssh-keygen\n\nand save your private and public keys in your local computer (by default in ~/.ssh). These keys will need to be copied to your remote repository. Next think is decide which remote repository1 will you be pushing your code to. Git can be used just locally, without a remote, but it is really meant to be used with a remote repository. Three of the most popular remotes include:\nBitbucket\nGitHub\nGitLab\nConfusingly, the basic repositories are called repositories in GitHub and Bitbucket, but they are called projects in GitLab. But projects in GitHub are an optional feature of a repository, whereas in Bitbucket it’s something handled by JIRA, a project management tool.At Roche we use the three of them, specifically Enterprise versions of these.\nIndependently of which one you are using (I recommend either GitHub or Gitlab), you need to link your local repository (the one in your computer) with the remote one. You can do it in a number of ways:\n\nProject configuration\nIf you create a new repository in your upstream:\n\nThe default master branch has been renamed main on GitHub in 2020.\n\ngit clone git@ssh.<path-to-your-repo>.git\ncd <project directory>\ngit add .\ngit commit -m \"First commit\"\ngit push -u origin master\n\nIf your project already exists but it was never pushed to git:\n\ncd <project directory>\ngit init\ngit remote add origin git@ssh.<path-to-your-repo>.git\ngit add .\ngit commit -m \"First commit\"\ngit push -u origin master\n\nBasic commands\n\nCommand\nUsage\nExample\ngit add\nStages changes to be committed\ngit add .\ngit commit\nCommits changes to the local repository\ngit commit -m \"Added table summary\"\ngit status\nReturns the current status of the branch\ngit status\ngit push\nPush the commits to the remote repository\ngit push\ngit pull\nRetrieves the changes of the remote branch into your local repository\ngit pull\n\nWe have already seen a few commands already, but perhaps the most basic ones are the combination of git add and git commit:\n\ngit add <file1> <file2>... \n\nor\n\ngit add .\n\n(for everything)\ngit add stages or includes the files to be added to be commit, and git commit commits the changes to the local repository.\n\ngit commit -m \"your message here\"\n\nGit commit messages should be as descriptive as possible, while also being concise. If a message is not included in the command, you will be prompted to include a message.\n\n\n\nFigure 2: From https://xkcd.com/1296/\n\n\n\n\nDon’t be this guy\nOK, now you have your changes committed to your local repository, so how do we include them in the remote repository? Why, with git push of course:\n\ngit push\n\nYou will get a nice message with what is being uploaded and how. And if there are any changes to the repository you need to pull them first from it into your local environment with:\n\ngit pull\n\nEasy, right?\nWorking with branches\nWell, not quite. We’ve been working so far with the master branch but actually working on a single branch is usually a Very Bad Idea (VBI for short). It is better to leave the master branch for the official or true & tested (as far as possible) version of our work and work on short-lived branches.\nEssentially a branch is a parallel version of our work directory in which the files may differ - even being completely missing. Since git keeps track of the changes snapshop by snapshot (or commit by commit), it is possible to reconstruct the work the steps that separated one branch from another. More importantly, working on a branch separates new or experimental work from what we already consider done to avoid messing with it; in case we screw things up we can always checkout the main branch and discard the changes.\nSetting up a new branch is as easy as:\n\ngit checkout -b name_of_branch\n\n\nCreate a new local branch\nNotice the flag -b is to create a new branch. As for branch names, the convention depends pretty much on the choice of remote: for Bitbucket when using JIRA, it is usually something like PROD-11-Update-load-function, where PROD is the project name and 11 the number of the issue. Similarly, in GitLab we would have 11-Update-load-function for the same purpose. In GitHub for some odd reason you do not track the issue number with the name of the branch (but you can do it anyway) so it could be as simple as Update-load-function. The important thing is that the branch name is as descriptive as possible of the work done in the branch. So “Update-load-function” is a good name, even better if we include the number of an issue in a project in which it may be more detailed. lorenzo-branchi, although funny, is definitely not a good branch name because it does not adequately describe what is it about.\nThere’s another thing to do: we need to push the branch to the remote repository so it exists there as well: we can do that with a simple command:\n\ngit push -u origin name_of_branch\n\n\nPush a new local branch\nA branch can also be created first in the remote repository and then checked out after running git pull; whichever you prefer is fine (but personally I find switching between my command line and the browser annoying). Once a branch is created, we are automatically in it. We can later switch branches with:\n\ngit checkout name_of_branch\n\nWe won’t be usually allowed to change branches if there are uncommitted changes in our current branch, to avoid losing our work. This can be forced with a --force flag but it is not recommended. We can use the git pull and git push commands to update the remote repository with the changes to our branch.\nGood practises for branches\n\nGood practises for branches\nBranches should be used to work on one feature/fix and one only. Working on two separate issues at the same time is in general a VBI. Do it only if two issues are extremely related.\nBranches must die. That is, branches should be relatively short lived and merge with the main branch as quickly as possible; if there’s the need to revisit the issue then open a new branch later. Dragging a branch on for weeks (or rather, for commits) makes it harder to merge it later and almost guarantees you will have merge issues later.\n\nCommand\nUsage\nExample\ngit checkout\nSwitches to a given branch\ngit checkout master\ngit checkout\nCreates new branch\ngit checkout -b new_branch\ngit push -u\nSets upstream branch and pushes commits to it\ngit push -u origin new_branch\n\nWorkflow\nFine, so we have our master and we have our branch or branches. How should we organise the work? Welcome to the wondrous world of workflows. Essentially a git workflow is a way to organise the way you work with branches. You can start with what is sometimes called “no flow”: do not open new branches, do all commits to master. We have already seen why this might be a bad idea (a VBI actually), but it might fly for extremely simple work done by a single person, especially at the beginning. Essentially, this is like adding savings points to a linear progress, much like a videogame.\n\n\n\nFigure 3: From https://blog.programster.org/git-workflows\n\n\n\nThe only thing that is less-flowy than this way of working is to not add commits at any point - essentially not using git at all, really. It’s like playing a videogame without saving points, or writing a draft of a document without saving it until the very end. Reckless.\nA very common flow is one called “GitHub flow” which, despite the name, is not restricted to be used with GitHub (it’s just the flow that the developers of GitHub itself were allegedly using).\n\n\n\nFigure 4: From https://blog.programster.org/git-workflows\n\n\n\nIt may seem complicated, but it really isn’t: you have a master (or main) branch in which you start to work (typically, just “first commit” and maybe a few configurations more at most). Once you want to add a feature - a new function, modify/delete an existing one, upgrade, refactor, whatever, you open a new branch2 and start working on it. Once you are done, you submit a Merge Request (or Pull Request, the naming may differ) and have someone else in the team review it (or yourself, later). If the review passes, then the code is merged with the master/main branch and the feature branch is deleted.\nA bugfix branch is essentially the same as a feature branch, just that it is meant to fix an issue. It is not created in a different way and has no special properties. However, you can adopt the convention of naming your branches depending on what are they supposed to do by adding a prefix like feature/<name_of_branch> or bugfix/<name_of_branch>. This will be immediately informative of what a given branch is for, and sets the stage for complex workflows later (especially for the use of automated tools). But at the very basic level, it’s not really necessary.\nThere are many other versions of flows. There’s Git flow, GitLab flow, OneFlow… and of course many other versions that go unnamed, usually modified from the basic ones. The important thing is that everyone in the team agrees on a specific flow, because that is how they are supposed to collaborate. Agreeing on a set of standards is good practise that avoids the flurry of emails and chats about “hey, can you approve my MR? am I supposed to merge my MR or rebase it? Or does the reviewer do that?” etc. If you’re anything like me you will hate those messages with a passion.\nSummary\nA quick summary table describing the git commands we’ve seen in this post.\n\nCommand\nUsage\nExample\ngit add\nStages changes to be committed\ngit add .\ngit commit\nCommits changes to the local repository\ngit commit -m \"Added table summary\"\ngit status\nReturns the current status of the branch\ngit status\ngit push\nPush the commits to the remote repository\ngit push\ngit pull\nRetrieves the changes of the remote branch into your local repository\ngit pull\ngit checkout\nSwitches to a given branch\ngit checkout master\ngit checkout\nCreates new branch\ngit checkout -b new_branch\ngit push -u\nSets upstream branch and pushes commits to it\ngit push -u origin new_branch\n\nRead more\nWe have barely scratched the surface of what git is about; we’ve left out basic but not quite elementary topics such as inspecting changes git log andgit diff, solving merge conflicts, the classical tug-of-war between merging and rebasing branches, automated CI/CD pipelines, and much more. It is highly recommended to have a look at the vast amounts of info about git that exist online. Some selections include:\nThe Git Book: kind of the basic manual for git, that contains everything about it. It can be cumbersome to read (it gets really technical sometimes but it is exhaustive).\nHappy Git and GitHub for the useR, an opinionated book on how to use git (focused on the R user, but applicable to anyone).\nLearn Git Branching an online hands-on tutorial that helps you visualise what happens when you branch.\nAnd remember:\n\n\n\nFigure 5: From https://xkcd.com/1597/\n\n\n\n\nAlso called an upstream repository↩︎\ncalled a feature branch↩︎\n",
    "preview": {},
    "last_modified": "2021-04-19T09:59:59+02:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to plots have I laid!",
    "description": "Welcome to our my blog, plots have I laid. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Lorenzo Braschi",
        "url": {}
      }
    ],
    "date": "2021-01-19",
    "categories": [],
    "contents": "\n\nPlots have I laid, inductions dangerous, By drunken prophecies, libels and dreams\n(Richard III, I, 1, 32-33)\n\nSee Richard III in PlayShakespeare.com\nWelcome to my blog. I’m Lorenzo Braschi, a data scientist currently working at Roche. I’m currently based in Basel, Switzerland, although my main office is in Warsaw, Poland.\nI’m an enthusiast for all things R and have been using it irregularly for over 10 years now - before RStudio even existed. My interests lie all over the place, from modelling to visualisation, from NLP to cartography. As a result, I’m a bit of a jack-of-all-trades, master of none.\nThis blog is my n-th attempt at writing things in R that I find interesting. One temptation to avoid is to try to write the definitive guide on X: a “post to kill all posts” of sorts, the kind of ultimate guide on a topic that will make all others unnecessary. This is a variation on the theme of “perfection paralysis”: since all posts have to be perfect, you never write anything. Accepting incompleteness is a necessity for a writer - or almost any other profession.\nI hope you find my content interesting!\n\n\n\n\n\n\n",
    "preview": "posts/welcome/lorenzo.jpg",
    "last_modified": "2021-04-19T09:59:59+02:00",
    "input_file": {}
  }
]
